AWSTemplateFormatVersion: 2010-09-09
Description: |
  Create Database Migration Service Replication Instances.
  Tests DMS replication endpoints connection to replication instance.
Metadata:
  LICENSE: Apache License Version 2.0
  'AWS::CloudFormation::Interface':
    ParameterGroups:
      - Label:
          default: DMS Replication Instance Configuration
        Parameters:
          - CreateNewReplicationInstance
          - ReplInstanceArn
          - PrivateSubnet1
          - PrivateSubnet2
          - SecurityGroup
          - InstanceType
          - EngineVersion
          - PublicAccess
          - MultiAz
      - Label:
          default: Source Database Configuration
        Parameters:
          - SourceDBName
          - SourceEngine
          - SourcePassword
          - SourcePort
          - SourceEndpointServer
          - SourceUser
      - Label:
          default: Target Database Configuration
        Parameters:
          - TargetDBName
          - TargetEngine
          - TargetPassword
          - TargetPort
          - TargetEndpointServer
          - TargetUser
    ParameterLabels:
      CreateNewReplicationInstance:
        default: Create New Replication Instance?
      ReplInstanceArn:
        default: Existing DMS Replication Instance Arn
      SourceDBName:
        default: Source Database Name
      SourceEngine:
        default: Source Database Engine
      SourcePassword:
        default: Source Database Password
      SourcePort:
        default: Source Database Port
      SourceEndpointServer:
        default: Source Database Endpoint
      SourceUser:
        default: Source Database Username
      TargetDBName:
        default: Target Database Name
      TargetEngine:
        default: Target Database Engine
      TargetPassword:
        default: Target Database Password
      TargetPort:
        default: Target Database Port
      TargetEndpointServer:
        default: Target Database Endpoint
      TargetUser:
        default: Target Database Username
      EngineVersion:
        default: Replication Engine Version
      InstanceType:
        default: Instance Type
      MultiAz:
        default: Enable MultiAZ
      PublicAccess:
        default: Allow Public Access
      SecurityGroup:
        default: Security Group
      PrivateSubnet1:
        default: Private Subnet 1
      PrivateSubnet2:
        default: Private Subnet 2
Parameters:
  CreateNewReplicationInstance:
    Type: String
    Default: 'yes'
    AllowedValues:
      - 'yes'
      - 'no'
    Description: Please specify if you want to create new replication instance
  ReplInstanceArn:
    Type: String
    Description: Arn of the DMS replication instance
  EngineVersion:
    AllowedValues:
      - 3.1.3
      - 2.4.5
      - 2.4.4
      - 2.4.3
    Default: 3.1.3
    Description: DMS replication engine version
    Type: String
  InstanceType:
    AllowedValues:
      - dms.t2.micro
      - dms.t2.small
      - dms.t2.medium
      - dms.t2.large
      - dms.c4.large
      - dms.c4.xlarge
      - dms.c4.2xlarge
      - dms.c4.4xlarge
    Default: dms.c4.large
    Description: DMS replication instance type
    Type: String
  MultiAz:
    AllowedValues:
      - 'true'
      - 'false'
    Default: 'false'
    Description: Enable MultiAZ
    Type: String
  PublicAccess:
    AllowedValues:
      - 'true'
      - 'false'
    Default: 'false'
    Description: Publicly Accessible
    Type: String
  SecurityGroup:
    Description: 'Security group ID for DMS replication instance (e.g., sg-1234abcd)'
    Type: 'AWS::EC2::SecurityGroup::Id'
  PrivateSubnet1:
    Description: Choose a private subnet for DMS replication instance
    Type: 'AWS::EC2::Subnet::Id'
  PrivateSubnet2:
    Description: Choose a private subnet for DMS replication instance
    Type: 'AWS::EC2::Subnet::Id'

  SourceDBName:
    Type: String
    Description: Name of the database in source server
  SourceEngine:
    Type: String
    Description: Database engine running on the source
    Default: oracle
    AllowedValues:
      - mysql
      - oracle
      - postgres
      - mariadb
      - db2
      - azuredb
      - sybase
      - sqlserver
  SourcePassword:
    Type: String
    Description: Source database password
    NoEcho: 'true'
  SourcePort:
    Type: String
    Description: Port on which the source database is running
  SourceEndpointServer:
    Type: String
    Description: Source database hostname, endpoint URL or IP address
  SourceUser:
    Type: String
    Description: Source database user name
  TargetDBName:
    Type: String
    Description: Name of the database in target server
  TargetEngine:
    Type: String
    Description: Database engine running on the target
    AllowedValues:
      - mysql
      - oracle
      - postgres
      - mariadb
      - aurora
      - aurora-postgresql
      - redshift
      - sqlserver
    Default: aurora-postgresql
  TargetPassword:
    Type: String
    Description: Target database password
    NoEcho: 'true'
  TargetPort:
    Type: String
    Description: Port on which the target database is running
  TargetEndpointServer:
    Type: String
    Description: Target database hostname, endpoint URL or IP address
  TargetUser:
    Type: String
    Description: Target database user name
Conditions:
  CreateReplicationInstance: !Equals
    - !Ref CreateNewReplicationInstance
    - 'yes'

Resources:
  ReplicationInstance:
    Condition: CreateReplicationInstance
    Properties:
      EngineVersion: !Ref EngineVersion
      MultiAZ: !Ref MultiAz
      PubliclyAccessible: !Ref PublicAccess
      ReplicationInstanceClass: !Ref InstanceType
      ReplicationSubnetGroupIdentifier: !Ref ReplicationSubnetGroup
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-ReplicationSetup'
        - Key: Product
          Value: DMS-Automation-ReplicationSetup
        - Key: Solution
          Value: DMS-Automation-ReplicationSetup
      VpcSecurityGroupIds:
        - !Ref SecurityGroup
    Type: 'AWS::DMS::ReplicationInstance'
  SourceEndpoint:
    Type: 'AWS::DMS::Endpoint'
    Properties:
      DatabaseName: !Ref SourceDBName
      EndpointType: source
      EngineName: !Ref SourceEngine
      Password: !Ref SourcePassword
      Port: !Ref SourcePort
      ServerName: !Ref SourceEndpointServer
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-ReplicationSetup'
        - Key: Product
          Value: DMS-Automation-ReplicationSetup
        - Key: Solution
          Value: DMS-Automation-ReplicationSetup
      Username: !Ref SourceUser
  TargetEndpoint:
    Type: 'AWS::DMS::Endpoint'
    Properties:
      DatabaseName: !Ref TargetDBName
      EndpointType: target
      EngineName: !Ref TargetEngine
      Password: !Ref TargetPassword
      Port: !Ref TargetPort
      ServerName: !Ref TargetEndpointServer
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-ReplicationSetup'
        - Key: Product
          Value: DMS-Automation-ReplicationSetup
        - Key: Solution
          Value: DMS-Automation-ReplicationSetup
      Username: !Ref TargetUser
  ReplicationSubnetGroup:
    Condition: CreateReplicationInstance
    Properties:
      ReplicationSubnetGroupDescription: DMS Automation Subnets
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-ReplicationSetup'
        - Key: Product
          Value: DMS-Automation-ReplicationSetup
        - Key: Solution
          Value: DMS-Automation-ReplicationSetup
    Type: 'AWS::DMS::ReplicationSubnetGroup'
  CheckEndpointConnection:
    Type: 'Custom::DmsEndpointConnectionTester'
    Properties:
      ServiceToken: !GetAtt
        - DmsEndpointConnTest
        - Arn
      SourceArn: !Ref SourceEndpoint
      TargetArn: !Ref TargetEndpoint
      ReplicationInstanceArn: !If [CreateReplicationInstance, !Ref ReplicationInstance, !Ref ReplInstanceArn]
  DmsEndpointConnTestRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
      Path: /
      Policies:
        - PolicyName: dms-connection-access
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'dms:DescribeConnections'
                  - 'dms:TestConnection'
                Resource: '*'
  DmsEndpointConnTest:
    Type: 'AWS::Lambda::Function'
    Properties:
      Description: Checks the connection between DMS replication instance and DMS endpoint
      Handler: index.lambda_handler
      Runtime: python3.7
      Role: !GetAtt
        - DmsEndpointConnTestRole
        - Arn
      Timeout: 900
      Code:
        ZipFile: |
          import cfnresponse
          import json
          import boto3

          def lambda_handler(event, context):
              print('Received event: %s' % json.dumps(event, indent=2))
              source_endpoint = event['ResourceProperties']['SourceArn']
              target_endpoint = event['ResourceProperties']['TargetArn']
              replication_inst = event['ResourceProperties']['ReplicationInstanceArn']
              try:
                if (event['RequestType'] == 'Create') or (event['RequestType'] == 'Update'):
                    print ('This is a %s event' %(event['RequestType']))
                    print('Checking connection for Source .....')
                    source_result = check_connection(source_endpoint,replication_inst)
                    print('Source result was %s' %(source_result))
                    if 'success' in source_result:
                        print('Proceeding to check connection for Target ....')
                        target_result = check_connection(target_endpoint,replication_inst)
                        print('Target result was %s' %(target_result))
                        if 'success' in target_result:
                            cfnresponse.send(event, context, cfnresponse.SUCCESS, {}, '')
                        else:
                            print('Target connection failed')
                            cfnresponse.send(event, context, cfnresponse.FAILED, {}, '')
                    else:
                        print('Source connection failed')
                        cfnresponse.send(event, context, cfnresponse.FAILED, {}, '')
                elif event['RequestType'] == 'Delete':
                    print('Delete event nothing will be done')
                    cfnresponse.send(event, context, cfnresponse.SUCCESS, {}, '')
              except Exception as e:
                print(e)
                cfnresponse.send(event, context, cfnresponse.FAILED, {}, '')
          def check_connection(endpoint,rep):
              dms = boto3.client('dms')
              dms.test_connection(ReplicationInstanceArn=rep,EndpointArn=endpoint)
              waiter = dms.get_waiter('test_connection_succeeds')
              waiter.wait(
                  Filters=[
                      {
                          'Name': 'endpoint-arn',
                          'Values': [endpoint]
                      },
                      {
                          'Name': 'replication-instance-arn',
                          'Values':[rep]
                      }
                  ]
              )
              status_conn_api = dms.describe_connections(
                  Filters=[
                      {
                          'Name': 'endpoint-arn',
                          'Values': [endpoint]
                      },
                      {
                          'Name': 'replication-instance-arn',
                          'Values': [rep]
                      }
                  ]
              )
              stat_task = status_conn_api['Connections'][0]['Status']
              print('The connection test was %s' %(stat_task))
              return (stat_task)
Outputs:
  SourceEndpointArn:
    Description: DMS Source Endpoint Arn
    Value: !Ref SourceEndpoint
  TargetEndpointArn:
    Description: DMS Target Endpoint Arn
    Value: !Ref TargetEndpoint
  ReplicationInstanceArn:
    Description: DMS Replication Instance Arn
    Value: !If [CreateReplicationInstance, !Ref ReplicationInstance, !Ref ReplInstanceArn]
