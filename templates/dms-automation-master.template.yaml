AWSTemplateFormatVersion: 2010-09-09
Metadata:
  AWS::CloudFormation::Interface:
    #Parameter Groups
    ParameterGroups:
    - Label:
        default: Migration Setup
      Parameters:
      - pCreateSample
      - CreateNewReplicationInstance
      - pMigNotify
      - pFullLoadOnly
      - pTaskName
      - pS3BucketKey
      - pS3BucketName
    - Label: 
        default: DMS Configurattion for New Endpoints and Replication Instance
      Parameters:
      - SourceDBName
      - SourceEngine
      - SourcePassword
      - SourcePort
      - SourceEndpointServer
      - SourceUser
      - TargetDBName
      - TargetEngine
      - TargetPassword
      - TargetPort
      - TargetEndpointServer
      - TargetUser
    - Label: 
        default: DMS Configuration for Existing Endpoints and Replication Instance
      Parameters:
      - pDmsSourceArn
      - pDmsTargetArn
      - pDmsReplicationArn
    - Label: 
        default: Network Configuration
      Parameters:
      - CreateVpc
      - AvailabilityZones
      - KeyPairName
      - RemoteAccessCIDR
      - EnableBastion
      - pCodeBuildSecurityGroup
      - pCodeBuildSubnet
      - pCodeBuildVPC
    - Label: 
        default: AWS Quick Start configuration 
      Parameters:
      - QSS3BucketName
      - QSS3KeyPrefix
      
    # Parameter Labels
    ParameterLabels:
      pFullLoadOnly:
        default: Full Load Only?
      pCreateSample:
        default: Create Sample?
      pMigNotify:
        default: Notification Email
      pCodeBuildSecurityGroup:
        default: Security Group ID
      pCodeBuildSubnet:
        default: Private Subnet ID
      pCodeBuildVPC:
        default: VPC ID
      pS3BucketKey:
        default: Migration S3 Bucket
      pS3BucketName:
        default: Migration S3 Key
      pTaskName:
        default: Task Name
      pDmsSourceArn:
        default: DMS Source Endpoint Arn
      pDmsTargetArn:
        default: DMS Target Endpoint Arn
      pDmsReplicationArn:
        default: DMS Replication Instance Endpoint Arn
      CreateNewReplicationInstance:
        default: Create New Replication Instance?
      SourceDBName:
        default: Source DB Name
      SourceEngine:
        default: Source DB Engine
      SourcePassword:
        default: Source DB Password
      SourcePort:
        default: Source DB Port
      SourceEndpointServer:
        default: Source DB Server
      SourceUser:
        default: Source User
      TargetDBName:
        default: Target DB Name
      TargetEngine:
        default: Target DB Engine
      TargetPassword:
        default: Target DB Password
      TargetPort:
        default: Target DB Port
      TargetEndpointServer:
        default: Target DB Server
      TargetUser:
        default: Target DB User
      AvailabilityZones:
        default: Availanility Zones
      KeyPairName:
        default: Key Pair Name
      RemoteAccessCIDR:
        default: Remote Access CIDR
      EnableBastion:
        default: Enable Bastion?
      QSS3BucketName:
        default: Quickstart S3 Bucket Name
      QSS3KeyPrefix:
        default: Quickstart S3 Prefix
      CreateVpc:
        default: Create VPC?
Parameters:
  pCreateSample:
    Type: String
    Description: Please choose this option if you want to populate source database
    AllowedValues:
      - 'yes'
      - 'no'
    Default: 'yes'
  pFullLoadOnly:
    Type: String
    Description: This is for task to do only full loads and not CDC
    AllowedValues:
      - 'yes'
      - 'no'
    Default: 'no'
  pMigNotify:
    Type: String
    Description: This email will get notifications on Migration Status
  pCodeBuildSecurityGroup:
    Type: String
    Description: Security group used by CodeBuild. Please ensure that this has access to
      RDS endpoint
  pCodeBuildSubnet:
    Type: String
    Description: Private subnet ID with NAT gateway where codebuild will be launched
  pCodeBuildVPC:
    Type: String
    Description: VPC ID where codebuild will be launched. Subnet and security group should
      belong to this VPC.
  pS3BucketKey:
    Type: String
    Description : >- 
      (optional) The location of file which is used as source for CodePipeline.
      If you choose to create a sample leave this empty.
  pS3BucketName:
    Type: String
    Description: >- 
      (optional) The name of the S3 bucket where the code resides. 
      If you choose to create a sample leave this empty.
  pTaskName:
    Type: String
    Description: Name of DMS task. If left empty, stack name will be used.
  pDmsSourceArn:
    Type: String
    Description: Arn of source endpoint which was successfully tested with replication
      instance
  pDmsTargetArn:
    Type: String
    Description: Arn of target endpoint which was successfully tested with replication
      instance
  pDmsReplicationArn:
    Type: String
    Description: Arn of replication instance used for migration
  CreateNewReplicationInstance:
    Type: String
    Default: 'yes'
    AllowedValues:
      - 'yes'
      - 'no'
    Description: Please specify if you want to create new replication instance
  SourceDBName:
    Type: String
    Description: Name of the database or service name in source server. 
  SourceEngine:
    Type: String
    Description: Database engine running on the source. 
    Default: oracle
    AllowedValues:
      - mysql
      - oracle
      - postgres
      - mariadb
      - db2
      - azuredb
      - sybase
      - sqlserver
  SourcePassword:
    Type: String
    Description: Source database password. 
    NoEcho: 'true'
  SourcePort:
    Type: String
    Description: Port on which the source database is running
    Default: '1521'
  SourceEndpointServer:
    Type: String
    Description: (optional) Source database hostname, endpoint URL or IP address.
      Leave empty if creating a sample is 'yes'.
  SourceUser:
    Type: String
    Description: Source database user name
  TargetDBName:
    Type: String
    Description: Name of the database in target server
  TargetEngine:
    Type: String
    Description: Database engine running on the target
    Default: aurora-postgresql
    AllowedValues:
      - mysql
      - oracle
      - postgres
      - mariadb
      - aurora
      - aurora-postgresql
      - redshift
      - sqlserver
  TargetPassword:
    Type: String
    Description: Target database password
    NoEcho: 'true'
  TargetPort:
    Type: String
    Description: Port on which the target database is running
  TargetEndpointServer:
    Type: String
    Description: (optional) Target database hostname, endpoint URL or IP address.
      Leave empty if creating a sample is 'yes'.
  TargetUser:
    Type: String
    Description: Target database user name
  AvailabilityZones:
   Description: >-
      List of Availability Zones to use for the subnets in the VPC. Only two
      Availability Zones are used for this deployment, and the logical order of
      your selections is preserved.
   Type: 'List<AWS::EC2::AvailabilityZone::Name>'
  KeyPairName:
    ConstraintDescription: "Name of an existing EC2 key pair."
    Description: Name of an existing public/private key pair, for connecting to your instance.
    Type: "AWS::EC2::KeyPair::KeyName"
  RemoteAccessCIDR:
    AllowedPattern: "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/([0-9]|[1-2][0-9]|3[0-2]))$"
    ConstraintDescription: "CIDR block parameter must be in the form x.x.x.x/x"
    Description: "Allowed CIDR block for external SSH access."
    Default: 10.0.0.0/16
    Type: String
  EnableBastion:
    AllowedValues:
      - "true"
      - "false"
    Default: "true"
    Description: "If true, a bastion stack will be created."
    Type: String
  QSS3BucketName:
    AllowedPattern: "^[0-9a-zA-Z]+([0-9a-zA-Z-]*[0-9a-zA-Z])*$"
    ConstraintDescription: "Quick Start bucket name can include numbers, lowercase letters, uppercase letters, and hyphens (-). It cannot start or end with a hyphen (-)."
    Default: aws-quickstart
    Description: "S3 bucket name for the Quick Start assets. Quick Start bucket name can include numbers, lowercase letters, uppercase letters, and hyphens (-). It cannot start or end with a hyphen (-)."
    Type: String
  QSS3KeyPrefix:
    AllowedPattern: "^[0-9a-zA-Z-/]*$"
    ConstraintDescription: "Quick Start key prefix can include numbers, lowercase letters, uppercase letters, hyphens (-), and forward slash (/)."
    Default: quickstart-aws-dms-automation/
    Description: "S3 key prefix for the Quick Start assets. Quick Start key prefix can include numbers, lowercase letters, uppercase letters, hyphens (-), and forward slash (/)."
    Type: String
  CreateVpc:
    AllowedValues:
      - "true"
      - "false"
    Default: "true"
    Description: "If true, a VPC stack will be created. If false, please populate the VpcParameter mappings"
    Type: String


Mappings:
  TemplateParameters:
    ReplicationInstanceParameters:
      EngineVersion: 3.1.3
        # AllowedValues for Engine Version:
        #   - 3.1.3
        #   - 2.4.5
        #   - 2.4.4
        #   - 2.4.3
      InstanceType: dms.c4.large
        # AllowedValues:
        #   - dms.t2.micro
        #   - dms.t2.small
        #   - dms.t2.medium
        #   - dms.t2.large
        #   - dms.c4.large
        #   - dms.c4.xlarge
        #   - dms.c4.2xlarge
        #   - dms.c4.4xlarge
      MultiAz: 'false'
        # AllowedValues:
        #   - 'true'
        #   - 'false'
      PublicAccess: 'false'
        # AllowedValues:
        #   - 'true'
        #   - 'false'
      SecurityGroup: ''
        # Leave blank to use same Security Group as Target database
      PrivateSubnet1: ''
        # Leave blank to let this be the private subnet 1
      PrivateSubnet2: ''
        # Leave blank to let this be the private subnet 2
    SampleSourceParameters:
      DBBackupRetentionPeriod: "7"
        # "The number of days for which automatic database snapshots are retained."
      DBInstanceClass: db.r5.large
        # "The name of the compute and memory capacity class of the database instance."
      
    TargetParameters:
      DBAllocatedStorageEncrypted: false
        # Whether or not to encrypt the database.
        # AllowedValues:
        #   - true
        #   - false
      DBAutoMinorVersionUpgrade: "false"
        # AllowedValues:
        #   - "true"
        #   - "false"
        # "Select true to set up auto minor version upgrade."
      DBBackupRetentionPeriod: "35"
        # "The number of days for which automatic database snapshots are retained."
      DBEngineVersion: 10.7
        # Select Database Engine Version
        # AllowedValues:
        #   - 9.6.9
        #   - 9.6.11
        #   - 9.6.12
        #   - 10.5
        #   - 10.6
        #   - 10.7
      DBInstanceClass: db.r5.large
        # "The name of the compute and memory capacity class of the database instance."
      DBMasterUsername: pgadmin
          # "The database admin account username."
      DBPort: 5432
          # "The port the instance will listen for connections on."
      DBMultiAZ: "false"
        # AllowedValues:
        #   - "true"
        #   - "false"
        # "Specifies if the database instance is a multiple Availability Zone deployment."
      DBName: 'AuroraPostgresDB'
        # "Name of the Amazon Aurora database."
      EnableEventSubscription: "true"
        # AllowedValues:
        #   - "true"
        #   - "false"
        # "Enables event subscription to Notification List"
    VpcParameters:
      PrivateSubnet1CIDR: 10.0.0.0/19
        # CIDR block for private subnet 1 located in Availability Zone 1.
      PrivateSubnet2CIDR: 10.0.32.0/19
        # CIDR block for private subnet 2 located in Availability Zone 2.
      PublicSubnet1CIDR: 10.0.128.0/20
        # CIDR block for the public subnet 1 located in Availability Zone 1.
      PublicSubnet2CIDR: 10.0.144.0/20
        # CIDR block for the public subnet 2 located in Availability Zone 2.
      VPCCIDR: 10.0.0.0/16
        # CIDR block for the VPC.
      VpcId: ''
       # Choose an existing VPC ID
      PublicSubnet1: ''
      # used by Bastion
      PublicSubnet2: ''
      # used by Bastion
      PrivateSubnet1: ''
       # Choose a Private Subnet
      PrivateSubnet2: ''
      # Choose a Private Subnet
      SecurityGroupId: ''
      # Choose a security Group

Conditions:
  CreateNewVpc: !Equals
    - !Ref CreateVpc
    - 'true'
  CreateBastion: !Equals
    - !Ref EnableBastion
    - 'true'
  CreateSample: !Equals
    - !Ref pCreateSample
    - 'yes'
  CreateReplicationInst: !Equals
    - !Ref CreateNewReplicationInstance
    - 'yes'
Resources:

  VPCStack:
    Condition: CreateNewVpc
    Type: 'AWS::CloudFormation::Stack'
    Properties:
      TemplateURL: !Sub https://${QSS3BucketName}.s3.amazonaws.com/${QSS3KeyPrefix}submodules/quickstart-aws-vpc/templates/aws-vpc.template

      Parameters:
        AvailabilityZones: !Join
          - ','
          - !Ref AvailabilityZones
        NumberOfAZs: '2'

  BastionStack:
    Condition: CreateBastion
    Type: 'AWS::CloudFormation::Stack'
    Properties:
      TemplateURL: !Sub https://${QSS3BucketName}.s3.amazonaws.com/${QSS3KeyPrefix}submodules/quickstart-linux-bastion/templates/linux-bastion.template

      Parameters:
        KeyPairName: !Ref KeyPairName
        PublicSubnet1ID: !GetAtt
          - VPCStack
          - Outputs.PublicSubnet1ID
        PublicSubnet2ID: !GetAtt
          - VPCStack
          - Outputs.PublicSubnet2ID
        RemoteAccessCIDR: !Ref RemoteAccessCIDR
        VPCID: !GetAtt
          - VPCStack
          - Outputs.VPCID
  AuroraStack:
    Condition: CreateSample
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub https://${QSS3BucketName}.s3.amazonaws.com/${QSS3KeyPrefix}templates/aurora_postgres.template.yaml
      Parameters:
        Subnet1ID: !GetAtt VPCStack.Outputs.PrivateSubnet1AID
        Subnet2ID: !GetAtt VPCStack.Outputs.PrivateSubnet2AID
        VPCID: !GetAtt VPCStack.Outputs.VPCID
        NotificationList: !Ref pMigNotify

  DMSCodePiplineStack:
    DependsOn:
      - DMSSampleSourceSetup
      - DMSReplicationStack
    Type: 'AWS::CloudFormation::Stack'
    Properties:
      TemplateURL: !Sub https://${QSS3BucketName}.s3.amazonaws.com/${QSS3KeyPrefix}templates/dms-automation-code-pipeline.template.yaml
      Parameters:
        pMigNotify: !Ref pMigNotify
        pTaskName: !Ref pTaskName
        pCodeBuildVPC: !If [CreateSample, !GetAtt VPCStack.Outputs.VPCID, !Ref pCodeBuildVPC]
        pCodeBuildSubnet: !If [CreateSample, !GetAtt VPCStack.Outputs.PrivateSubnet1AID, !Ref pCodeBuildSubnet]
        pCodeBuildSecurityGroup: !If [CreateSample, !GetAtt DMSSampleSourceSetup.Outputs.SampleSecurityGroup, !Ref pCodeBuildSecurityGroup]
        pS3BucketName: !Ref S3Bucket
        pS3BucketKey: 
          !If 
            - CreateSample 
            - !Sub ${QSS3KeyPrefix}/scripts/test.zip
            - !Ref pS3BucketKey
        pRDSEndpoint: !If [CreateSample, !GetAtt AuroraStack.Outputs.RDSEndPointAddress, !Ref TargetEndpointServer]
        pRDSName:  !If [CreateSample, !FindInMap [TemplateParameters, TargetParameters, DBName] , !Ref TargetDBName]
        pRDSUser: !If [CreateSample, !FindInMap [TemplateParameters, TargetParameters, DBMasterUsername] , !Ref TargetUser]
        pRDSPassword: !If [CreateSample, !FindInMap [TemplateParameters, TargetParameters, DBMasterUserPassword] , !Ref TargetPassword]
        pDmsSourceArn: !If [CreateSample, !GetAtt DMSReplicationStack.Outputs.SourceEndpointArn, !Ref pDmsSourceArn]
        pDmsTargetArn: !If [CreateSample, !GetAtt DMSReplicationStack.Outputs.TargetEndpointArn, !Ref pDmsTargetArn]
        pDmsReplicationArn: !If [CreateSample, !GetAtt DMSReplicationStack.Outputs.ReplicationInstanceArn, !Ref pDmsReplicationArn]
        pCreateSample: !Ref pCreateSample
        pFullLoadOnly: !Ref pFullLoadOnly
        pSourceRDSEndpoint: !If [CreateSample, !GetAtt DMSSampleSourceSetup.Outputs.SampleSourceEndpoint, !Ref 'AWS::NoValue']
        pSourceRDSName: !Ref SourceDBName
        pSourceRDSPassword: !FindInMap [TemplateParameters, SampleSourceParameters, DBPassword]
        pSourceRDSUser: !If [CreateSample, !FindInMap [TemplateParameters, SampleSourceParameters, DBMasterUsername] , !Ref 'AWS::NoValue']
        pLambdaLayerKey: !Sub ${QSS3KeyPrefix}/scripts/boto3.zip
        pLambdaLayerBucket: !Ref S3Bucket



  DMSSampleSourceSetup:
    Condition: CreateSample
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub https://${QSS3BucketName}.s3.amazonaws.com/${QSS3KeyPrefix}templates/dms-automation-sample-source.template.yaml
      Parameters:
        VPCID: !GetAtt VPCStack.Outputs.VPCID
        Subnet1ID: !GetAtt VPCStack.Outputs.PrivateSubnet1AID
        Subnet2ID: !GetAtt VPCStack.Outputs.PrivateSubnet2AID
        DBName: !Ref SourceDBName
        DBBackupRetentionPeriod: !FindInMap [TemplateParameters, SampleSourceParameters, DBBackupRetentionPeriod]
        DBInstanceClass: !FindInMap [TemplateParameters, SampleSourceParameters, DBInstanceClass]
        DBMasterUsername: !FindInMap [TemplateParameters, SampleSourceParameters, DBMasterUsername]
        DBMasterUserPassword: !Ref SourcePassword
        DBPort: !Ref SourcePort
        DBAccessCIDR: !FindInMap [TemplateParameters, VpcParameters, VPCCIDR]


  DMSReplicationStack:
    Condition: CreateReplicationInst
    Type: 'AWS::CloudFormation::Stack'
    Properties:
      TemplateURL: !Sub https://${QSS3BucketName}.s3.amazonaws.com/${QSS3KeyPrefix}templates/dms-automation-replication-setup.template.yaml
      Parameters:
        LayerBucket: !Ref S3Bucket
        LayerKey:  !Sub ${QSS3KeyPrefix}/scripts/boto3.zip
        CreateNewReplicationInstance: !If [CreateSample, 'yes', !Ref CreateNewReplicationInstance]
        ReplInstanceArn: !Ref pDmsReplicationArn
        PrivateSubnet1: !If [CreateNewVpc, !GetAtt VPCStack.Outputs.PrivateSubnet1AID, !FindInMap [TemplateParameters, ReplicationInstanceParameters, PrivateSubnet1]]
        PrivateSubnet2: !If [CreateNewVpc, !GetAtt VPCStack.Outputs.PrivateSubnet2AID, !FindInMap [TemplateParameters, ReplicationInstanceParameters, PrivateSubnet2]]
        SecurityGroup: !If [CreateSample, !GetAtt DMSSampleSourceSetup.Outputs.SampleSecurityGroup, !FindInMap [TemplateParameters, ReplicationInstanceParameters, SecurityGroup]]
        InstanceType: !FindInMap [TemplateParameters, ReplicationInstanceParameters, InstanceType]
        EngineVersion: !FindInMap [TemplateParameters, ReplicationInstanceParameters, EngineVersion]
        PublicAccess: !FindInMap [TemplateParameters, ReplicationInstanceParameters, PublicAccess]
        MultiAz: !FindInMap [TemplateParameters, ReplicationInstanceParameters, MultiAz]
        SourceDBName: !Ref SourceDBName
        SourceEngine: !If [CreateSample, 'oracle' , !Ref SourceEngine]
        SourcePassword: !Ref SourcePassword
        SourcePort: !Ref SourcePort
        SourceEndpointServer: !If [CreateSample, !GetAtt DMSSampleSourceSetup.Outputs.SampleSourceEndpoint, !Ref SourceEndpointServer]
        SourceUser: !Ref SourceUser
        TargetDBName: !If [CreateSample, !FindInMap [TemplateParameters, TargetParameters, DBName] , !Ref TargetDBName]
        TargetEngine: !If [CreateSample, 'aurora-postgresql' , !Ref TargetEngine]
        TargetPassword: !If [CreateSample, !FindInMap [TemplateParameters, TargetParameters, DBMasterUserPassword], !Ref TargetPassword]
        TargetPort: !If [CreateSample, !FindInMap [TemplateParameters, TargetParameters, DBPort], !Ref TargetPort]
        TargetEndpointServer: !If [CreateSample, !GetAtt AuroraStack.Outputs.RDSEndPointAddress, !Ref TargetEndpointServer]
        TargetUser: !If [CreateSample, !FindInMap [TemplateParameters, TargetParameters, DBMasterUsername], !Ref TargetUser]

  S3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      VersioningConfiguration:
        Status: Enabled
  CopyS3FunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns:
        - !Sub 'arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
      Path: /
      Policies:
        - PolicyName: s3-access
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 's3:PutObject'
                  - 's3:GetObject'
                Resource: !Sub 'aws:${AWS::Partition}:s3:::${S3Bucket}*'
  CopyFiles:
    Type: 'Custom::CopyFiles'
    Properties:
      ServiceToken: !GetAtt
        - CopyS3Function
        - Arn
      Bucket: !Ref S3Bucket
      Source: !Ref QSS3BucketName
      Prefix: !Ref QSS3KeyPrefix
      Objects:
        - scripts/boto3.zip
        - scripts/test.zip
      
  CopyS3Function:
    Type: 'AWS::Lambda::Function'
    Properties:
      Code:
        ZipFile: !Sub
            |
            import cfnresponse
            import boto3
            import traceback
            import json

            
            def lambda_handler(event, context):
            # TODO implement
                try:
                    print('Received event: %s' % json.dumps(event))
                    bucket = event['ResourceProperties']['Bucket']
                    source_bucket = event['ResourceProperties']['Source']
                    source_bucket_prefix = event['ResourceProperties']['Prefix']
                    objects = event['ResourceProperties']['Objects']
                    if event['RequestType'] == 'Delete':
                        s3 = boto3.resource('s3')
                        bucket = s3.Bucket(bucket)
                        bucket.object_versions.all().delete()
                        print('Delete stack in progress the bucket is emptied')
                    elif event['RequestType'] == 'Update':
                        print('Stack is getting updated nothing will be done')
                    elif event['RequestType'] == 'Create':
                        s3 = boto3.client('s3')
                        for o in objects:
                            key = source_bucket_prefix + o
                            copy_source={
                                'Bucket': source_bucket,
                                'Key': key
                            }
                        s3.copy_object(CopySource=copy_source, Bucket=bucket, Key=key)
                    cfnresponse.send(event, context, cfnresponse.SUCCESS, {}, '')
                except:
                    print traceback.print_exc()
                    cfnresponse.send(event, context, cfnresponse.FAILED, {}, '')
      Role: !GetAtt
        - CopyS3FunctionRole
        - Arn
      Runtime: python3.7
      Handler: index.lambda_handler
      Timeout: '600'