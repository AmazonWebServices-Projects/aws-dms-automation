AWSTemplateFormatVersion: 2010-09-09
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
    - Label: 
        default: Network Configuration
      Parameters:
      - AvailabilityZones
      - EnableBastion
      - KeyPairName
      - RemoteAccessCIDR
    - Label:
        default: Migration Setup
      Parameters:
      - pCreateSample
      - CreateNewReplicationInstance
      - pMigNotify
      - pFullLoadOnly
      - pTaskName
      - DBInstanceClass
      - SampleDbPassword
      - pS3BucketName
      - pS3BucketKey
    - Label:
        default: DMS Configuration for New Replication Instance
      Parameters:
        - DmsEngineVersion
        - DmsInstanceType
        - DmsMultiAz
        - DmsPublicAccess
    - Label: 
        default: DMS Configuration for New Endpoints
      Parameters:
      - SourceDBName
      - SourceEngine
      - SourcePassword
      - SourcePort
      - SourceEndpointServer
      - SourceUser
      - TargetDBName
      - TargetEngine
      - TargetPassword
      - TargetPort
      - TargetEndpointServer
      - TargetUser
    - Label: 
        default: DMS Configuration for Existing Endpoints and Replication Instance
      Parameters:
      - pDmsSourceArn
      - pDmsTargetArn
      - pDmsReplicationArn
    - Label: 
        default: AWS Quick Start configuration 
      Parameters:
      - QSS3BucketName
      - QSS3KeyPrefix
      
    # Parameter Labels
    ParameterLabels:
      pS3BucketName:
        default: Migration Bucket Name
      pS3BucketKey:
        default: Migration Bucket Key
      DmsEngineVersion:
       default: Engine Version
      DmsInstanceType:
        default: Instance Type
      DmsMultiAz:
        default: Multi AZ?
      DmsPublicAccess:
        default: Public Access?
      SampleDbPassword:
        default: Sample DB Password
      DBInstanceClass:
        default: Sample DB Instance Class
      pFullLoadOnly:
        default: Full Load Only?
      pCreateSample:
        default: Create Sample?
      pMigNotify:
        default: Notification Email
      pTaskName:
        default: Task Name
      pDmsSourceArn:
        default: DMS Source Endpoint Arn
      pDmsTargetArn:
        default: DMS Target Endpoint Arn
      pDmsReplicationArn:
        default: DMS Replication Instance Endpoint Arn
      CreateNewReplicationInstance:
        default: Create New Replication Instance?
      SourceDBName:
        default: Source DB Name
      SourceEngine:
        default: Source DB Engine
      SourcePassword:
        default: Source DB Password
      SourcePort:
        default: Source DB Port
      SourceEndpointServer:
        default: Source DB Server
      SourceUser:
        default: Source User
      TargetDBName:
        default: Target DB Name
      TargetEngine:
        default: Target DB Engine
      TargetPassword:
        default: Target DB Password
      TargetPort:
        default: Target DB Port
      TargetEndpointServer:
        default: Target DB Server
      TargetUser:
        default: Target DB User
      AvailabilityZones:
        default: Availability Zones
      KeyPairName:
        default: Key Pair Name
      RemoteAccessCIDR:
        default: Remote Access CIDR
      EnableBastion:
        default: Enable Bastion?
      QSS3BucketName:
        default: Quickstart S3 Bucket Name
      QSS3KeyPrefix:
        default: Quickstart S3 Prefix
Parameters:
  pS3BucketName:
    Type: String
    Default: ''
    Description: S3 bucket name which has all the zip files necessary for migration. Leave blank if creating a sample.
  pS3BucketKey:
    Type: String
    Default: ''
    Description: S3 bucket key which has all the zip files necessary for migration. Leave blank if creating a sample.
  SampleDbPassword:
    AllowedPattern: "(?=^.{6,255}$)((?=.*\\d)(?=.*[A-Z])(?=.*[a-z])|(?=.*\\d)(?=.*[^A-Za-z0-9])(?=.*[a-z])|(?=.*[^A-Za-z0-9])(?=.*[A-Z])(?=.*[a-z])|(?=.*\\d)(?=.*[A-Z])(?=.*[^A-Za-z0-9]))^.*"
    ConstraintDescription: "Min 8 chars. Must include 1 uppercase, 1 lowercase, 1 number, 1 (non / @ \" ') symbol"
    Description: "The database admin account password. Min 8 chars. Must include 1 uppercase, 1 lowercase, 1 number, 1 (non / @ \" ') symbol"
    MaxLength: "64"
    MinLength: "8"
    NoEcho: "True"
    Type: String
  DBInstanceClass:
    Type: String
    Description: Please specify the DB instance size that you want to create for your sample
    AllowedValues:
      - db.r5.large
      - db.r5.xlarge
      - db.r5.2xlarge
      - db.r5.4xlarge
      - db.r5.12xlarge
      - db.r5.24xlarge
      - db.r4.large
      - db.r4.xlarge
      - db.r4.2xlarge
      - db.r4.4xlarge
      - db.r4.8xlarge
      - db.r4.16xlarge
    ConstraintDescription: "Must select a valid database instance type."
    Default: db.r5.large
  pCreateSample:
    Type: String
    Description: Please choose this option if you want to populate source database and do a sample migration from Oracle to Aurora PostgreSQL
    AllowedValues:
      - 'yes'
      - 'no'
    Default: 'yes'
  pFullLoadOnly:
    Type: String
    Description: This is for task to do only full loads and not CDC
    AllowedValues:
      - 'yes'
      - 'no'
    Default: 'no'
  pMigNotify:
    Type: String
    Description: This email will get notifications on migration status
  pTaskName:
    Type: String
    Description: Name of DMS task. If left empty, stack name will be used.
    Default: ''
  pDmsSourceArn:
    Type: String
    Description: Arn of source endpoint which was successfully tested with replication. Must include if creating sample is 'no'
      instance
    Default: ''
  pDmsTargetArn:
    Type: String
    Description: Arn of target endpoint which was successfully tested with replication. Must include if creating sample is 'no'
      instance
    Default: ''
  pDmsReplicationArn:
    Type: String
    Description: Arn of replication instance used for migration. Must include if creating sample is 'no' or if create replication instance is chosen as 'no'
    Default: ''
  CreateNewReplicationInstance:
    Type: String
    Default: 'yes'
    AllowedValues:
      - 'yes'
      - 'no'
    Description: Please specify if you want to create new replication instance
  SourceDBName:
    Type: String
    Description: Name of the database or service name in source server. 
    Default: ''
  SourceEngine:
    Type: String
    Description: Database engine running on the source. 
    Default: oracle
    AllowedValues:
      - mysql
      - oracle
      - postgres
      - mariadb
      - db2
      - azuredb
      - sybase
      - sqlserver
  SourcePassword:
    Type: String
    Description: Source database password. 
    NoEcho: 'true'
    Default: ''
  SourcePort:
    Type: String
    Description: Port on which the source database is running
    Default: '1521'
  SourceEndpointServer:
    Type: String
    Description: Source database hostname, endpoint URL or IP address. Leave empty if creating a sample is 'yes'.
    Default: ''
  SourceUser:
    Type: String
    Description: Source database user name
    Default: ''
  TargetDBName:
    Type: String
    Description: Name of the database in target server
    Default: ''
  TargetEngine:
    Type: String
    Description: Database engine running on the target
    Default: aurora-postgresql
    AllowedValues:
      - mysql
      - oracle
      - postgres
      - mariadb
      - aurora
      - aurora-postgresql
      - redshift
      - sqlserver
  TargetPassword:
    Type: String
    Description: Target database password
    NoEcho: 'true'
    Default: ''
  TargetPort:
    Type: String
    Description: Port on which the target database is running
    Default: '5432'
  TargetEndpointServer:
    Type: String
    Description: (optional) Target database hostname, endpoint URL or IP address.
      Leave empty if creating a sample is 'yes'.
    Default: ''
  TargetUser:
    Type: String
    Description: Target database user name
    Default: ''
  AvailabilityZones:
   Description: >-
      List of Availability Zones to use for the subnets in the VPC. Only two
      Availability Zones are used for this deployment, and the logical order of
      your selections is preserved.
   Type: 'List<AWS::EC2::AvailabilityZone::Name>'
  KeyPairName:
    ConstraintDescription: "Name of an existing EC2 key pair."
    Description: Name of an existing public/private key pair, for connecting to your instance.
    Type: "AWS::EC2::KeyPair::KeyName"
  RemoteAccessCIDR:
    AllowedPattern: "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/([0-9]|[1-2][0-9]|3[0-2]))$"
    ConstraintDescription: "CIDR block parameter must be in the form x.x.x.x/x"
    Description: "Allowed CIDR block for external SSH access."
    Default: 10.0.0.0/16
    Type: String
  EnableBastion:
    AllowedValues:
      - "true"
      - "false"
    Default: "false"
    Description: "If true, a bastion stack will be created."
    Type: String
  QSS3BucketName:
    AllowedPattern: "^[0-9a-zA-Z]+([0-9a-zA-Z-]*[0-9a-zA-Z])*$"
    ConstraintDescription: "Quick Start bucket name can include numbers, lowercase letters, uppercase letters, and hyphens (-). It cannot start or end with a hyphen (-)."
    Default: aws-quickstart
    Description: "S3 bucket name for the Quick Start assets. Quick Start bucket name can include numbers, lowercase letters, uppercase letters, and hyphens (-). It cannot start or end with a hyphen (-)."
    Type: String
  QSS3KeyPrefix:
    AllowedPattern: "^[0-9a-zA-Z-/]*$"
    ConstraintDescription: "Quick Start key prefix can include numbers, lowercase letters, uppercase letters, hyphens (-), and forward slash (/)."
    Default: quickstart-aws-dms-automation/
    Description: "S3 key prefix for the Quick Start assets. Quick Start key prefix can include numbers, lowercase letters, uppercase letters, hyphens (-), and forward slash (/)."
    Type: String
  DmsEngineVersion: 
    Default: 3.1.3
    Type: String
    Description: DMS Replication Engine Version
    AllowedValues:
      - 3.1.3
      - 2.4.5
      - 2.4.4
      - 2.4.3
  DmsInstanceType:
    Default: dms.c4.large
    Type: String
    Description: DMS Replication Instance Size
    AllowedValues:
      - dms.t2.micro
      - dms.t2.small
      - dms.t2.medium
      - dms.t2.large
      - dms.c4.large
      - dms.c4.xlarge
      - dms.c4.2xlarge
      - dms.c4.4xlarge
  DmsMultiAz: 
    Default: 'false'
    Type: String
    Description: DMS Replication Instance Multi AZ
    AllowedValues:
      - 'true'
      - 'false'
  DmsPublicAccess: 
    Default: 'false'
    Type: String
    Description: DMS Replication Instance Public Access
    AllowedValues:
      - 'true'
      - 'false'

      
    
Conditions:
  CreateBastion: 
    !Equals [!Ref EnableBastion, 'true']
  CreateSample: !Equals
    - !Ref pCreateSample
    - 'yes'
  CreateReplicationInst:
    !Or [!Equals [!Ref CreateNewReplicationInstance, 'yes'], Condition: CreateSample]
Resources:

  VPCStack:
    Type: 'AWS::CloudFormation::Stack'
    DependsOn: CopyFiles
    Properties:
      TemplateURL: !Sub https://${QSS3BucketName}.s3.amazonaws.com/${QSS3KeyPrefix}submodules/quickstart-aws-vpc/templates/aws-vpc.template
      Parameters:
        AvailabilityZones: !Join
          - ','
          - !Ref AvailabilityZones
        NumberOfAZs: '2'

  BastionStack:
    Condition: CreateBastion
    Type: 'AWS::CloudFormation::Stack'
    DependsOn: CopyFiles
    Properties:
      TemplateURL: !Sub https://${QSS3BucketName}.s3.amazonaws.com/${QSS3KeyPrefix}submodules/quickstart-linux-bastion/templates/linux-bastion.template

      Parameters:
        KeyPairName: !Ref KeyPairName
        PublicSubnet1ID: !GetAtt VPCStack.Outputs.PublicSubnet1ID
        PublicSubnet2ID: !GetAtt VPCStack.Outputs.PublicSubnet2ID
        RemoteAccessCIDR: !Ref RemoteAccessCIDR
        VPCID: !GetAtt VPCStack.Outputs.VPCID
  
  SampleSecurityGroup:
    Condition: CreateSample
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: "Allow access to sample resources"
      SecurityGroupEgress:
        -
          CidrIp: 0.0.0.0/0
          FromPort: -1
          IpProtocol: '-1'
          ToPort: -1
      SecurityGroupIngress:
        -
          CidrIp: !Ref RemoteAccessCIDR
          FromPort: 1521
          IpProtocol: tcp
          ToPort: 1521
        -
          CidrIp: !Ref RemoteAccessCIDR
          FromPort: 5432
          IpProtocol: tcp
          ToPort: 5432
      VpcId: !GetAtt VPCStack.Outputs.VPCID
      Tags:
      - Key: Name
        Value: !Sub SampleSGGroup-${AWS::StackName}
    
  SampleSecurityGroupIngress:
    Condition: CreateSample
    Properties:
      GroupId: !GetAtt 'SampleSecurityGroup.GroupId'
      IpProtocol: '-1'
      SourceSecurityGroupId: !Ref SampleSecurityGroup
      Description: 'Self Reference'
    Type: 'AWS::EC2::SecurityGroupIngress'

   VPCSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: "Allow access to entire VPC"
      SecurityGroupEgress:
        -
          CidrIp: 0.0.0.0/0
          FromPort: -1
          IpProtocol: '-1'
          ToPort: -1
      VpcId: !GetAtt VPCStack.Outputs.VPCID
      Tags:
      - Key: Name
        Value: !Sub SampleSGGroup-${AWS::StackName}
    
  VPCSecurityGroupIngress:
    Condition: CreateSample
    Properties:
      GroupId: !GetAtt 'VPCSecurityGroup.GroupId'
      IpProtocol: '-1'
      SourceSecurityGroupId: !Ref VPCSecurityGroup
      Description: 'Self Reference'
    Type: 'AWS::EC2::SecurityGroupIngress'

  AuroraStack:
    Condition: CreateSample
    Type: AWS::CloudFormation::Stack
    DependsOn: CopyFiles
    Properties:
      TemplateURL: !Sub https://${QSS3BucketName}.s3.amazonaws.com/${QSS3KeyPrefix}submodules/quickstart-amazon-aurora-postgresql/templates/aurora_postgres.template.yaml
      Parameters:
        Subnet1ID: !GetAtt VPCStack.Outputs.PrivateSubnet1AID
        Subnet2ID: !GetAtt VPCStack.Outputs.PrivateSubnet2AID
        VPCID: !GetAtt VPCStack.Outputs.VPCID
        CustomDBSecurityGroup: !GetAtt 'SampleSecurityGroup.GroupId'
        DBInstanceClass: !Ref DBInstanceClass
        DBMasterUserPassword: !Ref SampleDbPassword
        NotificationList: !Ref pMigNotify


  DMSCodePiplineStack:
    Type: 'AWS::CloudFormation::Stack'
    Properties:
      TemplateURL: !Sub https://${QSS3BucketName}.s3.amazonaws.com/${QSS3KeyPrefix}templates/dms-automation-code-pipeline.template.yaml
      Parameters:
        pMigNotify: !Ref pMigNotify
        pTaskName: !Ref pTaskName
        pCodeBuildVPC: !GetAtt VPCStack.Outputs.VPCID
        pCodeBuildSubnet: !GetAtt VPCStack.Outputs.PrivateSubnet1AID
        pCodeBuildSecurityGroup: !If [CreateSample, !GetAtt 'SampleSecurityGroup.GroupId', !Ref VPCSecurityGroup]
        pS3BucketName: !If [CreateSample, !Ref S3Bucket, !Ref pS3BucketName]
        pS3BucketKey: 
          !If 
            - CreateSample 
            - !Sub ${QSS3KeyPrefix}scripts/test.zip
            - !Ref pS3BucketKey
        pRDSEndpoint: !If [CreateSample, !GetAtt AuroraStack.Outputs.RDSEndPointAddress, !Ref TargetEndpointServer]
        pRDSName: !If [CreateSample, 'AuroraPostgresDB' , !Ref TargetDBName]
        pRDSUser: !If [CreateSample, 'pgadmin' , !Ref TargetUser]
        pRDSPassword: !If [CreateSample, !Ref SampleDbPassword, !Ref TargetPassword]
        pDmsSourceArn: !If [CreateSample, !GetAtt DMSReplicationStack.Outputs.SourceEndpointArn, !Ref pDmsSourceArn]
        pDmsTargetArn: !If [CreateSample, !GetAtt DMSReplicationStack.Outputs.TargetEndpointArn, !Ref pDmsTargetArn]
        pDmsReplicationArn: !If [CreateSample, !GetAtt DMSReplicationStack.Outputs.ReplicationInstanceArn, !Ref pDmsReplicationArn]
        pCreateSample: !Ref pCreateSample
        pFullLoadOnly: !Ref pFullLoadOnly
        pSourceRDSEndpoint: !If [CreateSample, !GetAtt DMSSampleSourceSetup.Outputs.SampleSourceEndpoint, !Ref 'AWS::NoValue']
        pSourceRDSName: !If [CreateSample, 'ORCL' ,!Ref 'AWS::NoValue']
        pSourceRDSPassword: !If [CreateSample, !Ref SampleDbPassword, !Ref 'AWS::NoValue']
        pSourceRDSUser: !If [CreateSample, 'master', !Ref 'AWS::NoValue']
        


  DMSSampleSourceSetup:
    Condition: CreateSample
    Type: AWS::CloudFormation::Stack
    DependsOn: CopyFiles
    Properties:
      TemplateURL: !Sub https://${QSS3BucketName}.s3.amazonaws.com/${QSS3KeyPrefix}templates/dms-automation-sample-source.template.yaml
      Parameters:
        VPCID: !GetAtt VPCStack.Outputs.VPCID
        Subnet1ID: !GetAtt VPCStack.Outputs.PrivateSubnet1AID
        Subnet2ID: !GetAtt VPCStack.Outputs.PrivateSubnet2AID
        DBInstanceClass: !Ref DBInstanceClass
        DBMasterUserPassword: !Ref SampleDbPassword
        CustomDBSecurityGroup: !GetAtt SampleSecurityGroup.GroupId


  DMSReplicationStack:
    Condition: CreateReplicationInst
    Type: AWS::CloudFormation::Stack
    DependsOn: CopyFiles
    Properties:
      TemplateURL: !Sub https://${QSS3BucketName}.s3.amazonaws.com/${QSS3KeyPrefix}templates/dms-automation-replication-setup.template.yaml
      Parameters:
        CreateNewReplicationInstance: !If [CreateSample, 'yes', !Ref CreateNewReplicationInstance]
        ReplInstanceArn: !Ref pDmsReplicationArn
        PrivateSubnet1: !GetAtt VPCStack.Outputs.PrivateSubnet1AID
        PrivateSubnet2: !GetAtt VPCStack.Outputs.PrivateSubnet2AID
        SecurityGroup:  !GetAtt 'SampleSecurityGroup.GroupId', !Ref VPCSecurityGroup]
        MultiAz: !Ref DmsMultiAz
        InstanceType: !Ref DmsInstanceType
        PublicAccess: !Ref DmsPublicAccess
        EngineVersion: !Ref DmsEngineVersion
        SourceDBName: !If [CreateSample, 'ORCL' , !Ref SourceDBName]
        SourceEngine: !If [CreateSample, 'oracle' , !Ref SourceEngine]
        SourcePassword: !If [CreateSample, !Ref SampleDbPassword , !Ref SourcePassword]
        SourcePort: !If [CreateSample, '1521' , !Ref SourcePort]
        SourceEndpointServer: !If [CreateSample, !GetAtt DMSSampleSourceSetup.Outputs.SampleSourceEndpoint, !Ref SourceEndpointServer]
        SourceUser: !If [CreateSample, 'master' ,!Ref SourceUser]
        TargetDBName: !If [CreateSample, 'AuroraPostgresDB' , !Ref TargetDBName]
        TargetEngine: !If [CreateSample, 'aurora-postgresql' , !Ref TargetEngine]
        TargetPassword: !If [CreateSample, !Ref SampleDbPassword , !Ref TargetPassword]
        TargetPort: !If [CreateSample, '5432' , !Ref TargetPort]
        TargetEndpointServer: !If [CreateSample, !GetAtt AuroraStack.Outputs.RDSEndPointAddress, !Ref TargetEndpointServer]
        TargetUser: !If [CreateSample, 'pgadmin' , !Ref TargetUser]

  S3Bucket:
    Type: AWS::S3::Bucket
    Condition: CreateSample
    Properties:
      VersioningConfiguration:
        Status: Enabled
  
  CopyS3FunctionRole:
    Type: AWS::IAM::Role
    Condition: CreateSample
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns:
        - !Sub 'arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
      Path: /
      Policies:
        - PolicyName: s3-access
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 's3:PutObject'
                  - 's3:GetObject'
                  - 's3:DeleteObject'
                  - 's3:ListBucketVersion*'
                  - 's3:ListBucket'
                  - 's3:DeleteObjectVersion'
                  - 's3:GetObjectVersion*'
                Resource: 
                  - !Sub 'arn:${AWS::Partition}:s3:::${S3Bucket}'
                  - !Sub 'arn:${AWS::Partition}:s3:::${S3Bucket}/*'
                  - !Sub 'arn:${AWS::Partition}:s3:::${QSS3BucketName}'
                  - !Sub 'arn:${AWS::Partition}:s3:::${QSS3BucketName}/*'

  CopyFiles:
    Type: 'Custom::CopyFiles'
    Condition: CreateSample
    Properties:
      ServiceToken: !GetAtt
        - CopyS3Function
        - Arn
      Bucket: !Ref S3Bucket
      Source: !Ref QSS3BucketName
      Prefix: !Ref QSS3KeyPrefix
      Objects:
        - scripts/test.zip
      
  CopyS3Function:
    Type: 'AWS::Lambda::Function'
    Condition: CreateSample
    Properties:
      Code:
        ZipFile: 
            |
            import cfnresponse
            import boto3
            import traceback
            import json
            import time
            
            def lambda_handler(event, context):
                
                try:
                    print('Received event: %s' % json.dumps(event, indent=2))
                    bucket = event['ResourceProperties']['Bucket']
                    source_bucket = event['ResourceProperties']['Source']
                    source_bucket_prefix = event['ResourceProperties']['Prefix']
                    objects = event['ResourceProperties']['Objects']
                    if event['RequestType'] == 'Delete':
                        s3 = boto3.resource('s3')
                        bucket = s3.Bucket(bucket)
                        bucket.object_versions.all().delete()
                        print('Delete stack in progress the bucket is emptied')
                    elif event['RequestType'] == 'Update':
                        print('Stack is getting updated nothing will be done')
                    elif event['RequestType'] == 'Create':
                        s3 = boto3.client('s3')
                        for o in objects:
                            key = source_bucket_prefix + o
                            copy_source={
                                'Bucket': source_bucket,
                                'Key': key
                            }
                            s3.copy_object(CopySource=copy_source, Bucket=bucket, Key=key)
                    cfnresponse.send(event, context, cfnresponse.SUCCESS, {}, '')
                except:
                    print(traceback.print_exc())
                    cfnresponse.send(event, context, cfnresponse.FAILED, {}, '')
      Role: !GetAtt
        - CopyS3FunctionRole
        - Arn
      Runtime: python3.7
      Handler: index.lambda_handler
      Timeout: 600
